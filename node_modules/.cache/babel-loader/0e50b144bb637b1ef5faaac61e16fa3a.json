{"ast":null,"code":"// import React, { useState,useEffect, useRef } from 'react';\n// import { Col, Container, Row } from 'react-bootstrap';\n// import Chartjs from 'chart.js';\n// import moment from 'moment';\n// import { ThemeConsumer } from 'react-bootstrap/esm/ThemeProvider';\n// const url = 'http://api.openweathermap.org/data/2.5/forecast?q=urbana&appid=4ccd9d42e589371f8ea88443f33536f9&units=imperial'\n// const Chart = () => {\n//   const chartContainer = useRef(null);\n//   const [chartInstance, setChartInstance] = useState(null);\n//   const test = useState({unit: 20})\n//   const test2 = useState({unit: moment().format('dddd')})\n//   useEffect(() => {\n//     async function get() {\n//         const response = await fetch(url);\n//         const data = await response.json();\n//         console.log(data.list[0].main.temp)    \n//         test[1]({unit: data.list[0].main.temp})\n//     }\n//     fetch(url, {method: 'GET',})\n//       .then((response) => response.json())\n//       .then((responseJson) => {testHandler(responseJson);})\n//     get();\n//   }, [chartContainer]);\n//   const chartConfig = {\n//     type: 'line',\n//     data: {\n//       datasets: [{\n//           data: [test[0].unit, 42, 40, 30, 35, 40, 43],\n//           label: 'Temperture Forcast (C)',\n//           backgroundColor: '#fde17e',\n//           // This binds the dataset to the left y axis\n//           yAxisID: 'left-y-axis'\n//       }, {\n//           data: [0.10, 0.20, 0.30, 0.30, 0.30, 0, 0.20],\n//           label: 'Chance of Rain (%)',\n//           backgroundColor: '#4DC3FF',\n//           // This binds the dataset to the right y axis\n//           yAxisID: 'right-y-axis'\n//       }],\n//       labels: [test2[0].unit,'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n//   },\n//     options: {\n//           scales: {\n//               yAxes: [{\n//                   id: 'left-y-axis',\n//                   type: 'linear',\n//                   position: 'left'\n//               }, {\n//                   id: 'right-y-axis',\n//                   type: 'linear',\n//                   position: 'right'\n//               }]\n//           }\n//       }\n//   };\n//   const testHandler = (e) => {\n//     test[1]({unit: e.list[0].main.temp});\n//     console.log('it worked');\n//     console.log(e);\n//     if (chartContainer && chartContainer.current) {\n//         const newChartInstance = new Chartjs(chartContainer.current, chartConfig);\n//         setChartInstance(newChartInstance);\n//     }\n//   }\n//   return (\n//     <Container>\n//         <Row>\n//             <Col sm={4} ></Col>\n//             <Col>\n//                 <h4>Weather App</h4>\n//                 <button onClick={testHandler} >test</button>\n//             </Col>\n//         </Row>\n//         <Row>\n//             <Col>\n//                 <canvas ref={chartContainer} />\n//             </Col>\n//         </Row>\n//     </Container>\n//   );\n// };\n// export default Chart;","map":{"version":3,"sources":["C:/Users/jdk17/Desktop/KingFisher/kingfisher-kayaking/src/Componets/weather/weather.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, { useState,useEffect, useRef } from 'react';\r\n// import { Col, Container, Row } from 'react-bootstrap';\r\n// import Chartjs from 'chart.js';\r\n// import moment from 'moment';\r\n// import { ThemeConsumer } from 'react-bootstrap/esm/ThemeProvider';\r\n\r\n\r\n// const url = 'http://api.openweathermap.org/data/2.5/forecast?q=urbana&appid=4ccd9d42e589371f8ea88443f33536f9&units=imperial'\r\n\r\n\r\n// const Chart = () => {\r\n//   const chartContainer = useRef(null);\r\n//   const [chartInstance, setChartInstance] = useState(null);\r\n\r\n//   const test = useState({unit: 20})\r\n//   const test2 = useState({unit: moment().format('dddd')})\r\n\r\n\r\n//   useEffect(() => {\r\n//     async function get() {\r\n\r\n//         const response = await fetch(url);\r\n//         const data = await response.json();\r\n    \r\n//         console.log(data.list[0].main.temp)    \r\n//         test[1]({unit: data.list[0].main.temp})\r\n\r\n//     }\r\n\r\n//     fetch(url, {method: 'GET',})\r\n//       .then((response) => response.json())\r\n//       .then((responseJson) => {testHandler(responseJson);})\r\n\r\n    \r\n//     get();\r\n\r\n//   }, [chartContainer]);\r\n\r\n\r\n\r\n\r\n//   const chartConfig = {\r\n//     type: 'line',\r\n//     data: {\r\n//       datasets: [{\r\n//           data: [test[0].unit, 42, 40, 30, 35, 40, 43],\r\n//           label: 'Temperture Forcast (C)',\r\n//           backgroundColor: '#fde17e',\r\n  \r\n//           // This binds the dataset to the left y axis\r\n//           yAxisID: 'left-y-axis'\r\n//       }, {\r\n//           data: [0.10, 0.20, 0.30, 0.30, 0.30, 0, 0.20],\r\n//           label: 'Chance of Rain (%)',\r\n//           backgroundColor: '#4DC3FF',\r\n  \r\n//           // This binds the dataset to the right y axis\r\n//           yAxisID: 'right-y-axis'\r\n//       }],\r\n//       labels: [test2[0].unit,'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\r\n//   },\r\n//     options: {\r\n//           scales: {\r\n//               yAxes: [{\r\n//                   id: 'left-y-axis',\r\n//                   type: 'linear',\r\n//                   position: 'left'\r\n//               }, {\r\n//                   id: 'right-y-axis',\r\n//                   type: 'linear',\r\n//                   position: 'right'\r\n//               }]\r\n//           }\r\n//       }\r\n//   };\r\n\r\n\r\n\r\n\r\n//   const testHandler = (e) => {\r\n//     test[1]({unit: e.list[0].main.temp});\r\n//     console.log('it worked');\r\n//     console.log(e);\r\n//     if (chartContainer && chartContainer.current) {\r\n//         const newChartInstance = new Chartjs(chartContainer.current, chartConfig);\r\n//         setChartInstance(newChartInstance);\r\n//     }\r\n//   }\r\n\r\n\r\n\r\n\r\n\r\n//   return (\r\n//     <Container>\r\n//         <Row>\r\n//             <Col sm={4} ></Col>\r\n//             <Col>\r\n//                 <h4>Weather App</h4>\r\n//                 <button onClick={testHandler} >test</button>\r\n//             </Col>\r\n//         </Row>\r\n//         <Row>\r\n//             <Col>\r\n//                 <canvas ref={chartContainer} />\r\n//             </Col>\r\n//         </Row>\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default Chart;"]},"metadata":{},"sourceType":"module"}