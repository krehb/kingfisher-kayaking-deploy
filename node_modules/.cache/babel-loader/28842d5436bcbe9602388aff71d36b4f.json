{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jdk17\\\\Desktop\\\\KingFisher\\\\kingfisher-kayaking\\\\src\\\\Componets\\\\weather\\\\weather.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport Chartjs from 'chart.js';\nconst chartConfig = {\n  type: 'line',\n  data: {\n    datasets: [{\n      data: [unit1, 42, 40, 30, 35, 40, 43],\n      label: 'Temperture Forcast (C)',\n      backgroundColor: '#FF9580',\n      // This binds the dataset to the left y axis\n      yAxisID: 'left-y-axis'\n    }, {\n      data: [0.10, 0.20, 0.30, 0.30, 0.30, 0, 0.20],\n      label: 'Chance of Rain (%)',\n      backgroundColor: '#4DC3FF',\n      // This binds the dataset to the right y axis\n      yAxisID: 'right-y-axis'\n    }],\n    labels: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n  },\n  options: {// ...\n  }\n};\n\nconst Chart = () => {\n  const chartContainer = useRef(null);\n  const [chartInstance, setChartInstance] = useState(null);\n  useEffect(() => {\n    if (chartContainer && chartContainer.current) {\n      const newChartInstance = new Chartjs(chartContainer.current, chartConfig);\n      setChartInstance(newChartInstance);\n    }\n  }, [chartContainer]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: chartContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Chart;","map":{"version":3,"sources":["C:/Users/jdk17/Desktop/KingFisher/kingfisher-kayaking/src/Componets/weather/weather.js"],"names":["React","useState","useEffect","useRef","Chartjs","chartConfig","type","data","datasets","unit1","label","backgroundColor","yAxisID","labels","options","Chart","chartContainer","chartInstance","setChartInstance","current","newChartInstance"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,EAAoCC,MAApC,QAAkD,OAAlD;AACA,OAAOC,OAAP,MAAoB,UAApB;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,IAAI,EAAE,MADY;AAElBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE,CAAC;AACPD,MAAAA,IAAI,EAAE,CAACE,KAAD,EAAQ,EAAR,EAAY,EAAZ,EAAgB,EAAhB,EAAoB,EAApB,EAAwB,EAAxB,EAA4B,EAA5B,CADC;AAEPC,MAAAA,KAAK,EAAE,wBAFA;AAGPC,MAAAA,eAAe,EAAE,SAHV;AAKP;AACAC,MAAAA,OAAO,EAAE;AANF,KAAD,EAOP;AACCL,MAAAA,IAAI,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,CAA/B,EAAkC,IAAlC,CADP;AAECG,MAAAA,KAAK,EAAE,oBAFR;AAGCC,MAAAA,eAAe,EAAE,SAHlB;AAKC;AACAC,MAAAA,OAAO,EAAE;AANV,KAPO,CADN;AAgBJC,IAAAA,MAAM,EAAE,CAAC,QAAD,EAAU,QAAV,EAAoB,SAApB,EAA+B,WAA/B,EAA4C,UAA5C,EAAwD,QAAxD,EAAkE,UAAlE;AAhBJ,GAFY;AAoBlBC,EAAAA,OAAO,EAAE,CACP;AADO;AApBS,CAApB;;AAyBA,MAAMC,KAAK,GAAG,MAAM;AAClB,QAAMC,cAAc,GAAGb,MAAM,CAAC,IAAD,CAA7B;AACA,QAAM,CAACc,aAAD,EAAgBC,gBAAhB,IAAoCjB,QAAQ,CAAC,IAAD,CAAlD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,cAAc,IAAIA,cAAc,CAACG,OAArC,EAA8C;AAC5C,YAAMC,gBAAgB,GAAG,IAAIhB,OAAJ,CAAYY,cAAc,CAACG,OAA3B,EAAoCd,WAApC,CAAzB;AACAa,MAAAA,gBAAgB,CAACE,gBAAD,CAAhB;AACD;AACF,GALQ,EAKN,CAACJ,cAAD,CALM,CAAT;AAOA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,GAAG,EAAEA,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAhBD;;AAkBA,eAAeD,KAAf","sourcesContent":["import React, { useState,useEffect, useRef } from 'react';\r\nimport Chartjs from 'chart.js';\r\n\r\nconst chartConfig = {\r\n  type: 'line',\r\n  data: {\r\n    datasets: [{\r\n        data: [unit1, 42, 40, 30, 35, 40, 43],\r\n        label: 'Temperture Forcast (C)',\r\n        backgroundColor: '#FF9580',\r\n\r\n        // This binds the dataset to the left y axis\r\n        yAxisID: 'left-y-axis'\r\n    }, {\r\n        data: [0.10, 0.20, 0.30, 0.30, 0.30, 0, 0.20],\r\n        label: 'Chance of Rain (%)',\r\n        backgroundColor: '#4DC3FF',\r\n\r\n        // This binds the dataset to the right y axis\r\n        yAxisID: 'right-y-axis'\r\n    }],\r\n    labels: ['Sunday','Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\r\n},\r\n  options: {\r\n    // ...\r\n  }\r\n};\r\n\r\nconst Chart = () => {\r\n  const chartContainer = useRef(null);\r\n  const [chartInstance, setChartInstance] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (chartContainer && chartContainer.current) {\r\n      const newChartInstance = new Chartjs(chartContainer.current, chartConfig);\r\n      setChartInstance(newChartInstance);\r\n    }\r\n  }, [chartContainer]);\r\n\r\n  return (\r\n    <div>\r\n      <canvas ref={chartContainer} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;"]},"metadata":{},"sourceType":"module"}