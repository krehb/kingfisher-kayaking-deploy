{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jdk17\\\\Desktop\\\\test\\\\kingfisher-kayaking\\\\src\\\\calendar\\\\index.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Calendar, CalendarList, Agenda } from 'react-native-calendars';\n\n/*#__PURE__*/\nReact.createElement(Calendar // Initially visible month. Default = Date()\n, {\n  current: '2012-03-01' // Minimum date that can be selected, dates before minDate will be grayed out. Default = undefined\n  ,\n  minDate: '2012-05-10' // Maximum date that can be selected, dates after maxDate will be grayed out. Default = undefined\n  ,\n  maxDate: '2012-05-30' // Handler which gets executed on day press. Default = undefined\n  ,\n  onDayPress: day => {\n    console.log('selected day', day);\n  } // Handler which gets executed on day long press. Default = undefined\n  ,\n  onDayLongPress: day => {\n    console.log('selected day', day);\n  } // Month format in calendar title. Formatting values: http://arshaw.com/xdate/#Formatting\n  ,\n  monthFormat: 'yyyy MM' // Handler which gets executed when visible month changes in calendar. Default = undefined\n  ,\n  onMonthChange: month => {\n    console.log('month changed', month);\n  } // Hide month navigation arrows. Default = false\n  ,\n  hideArrows: true // Replace default arrows with custom ones (direction can be 'left' or 'right')\n  ,\n  renderArrow: direction => /*#__PURE__*/React.createElement(Arrow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 32\n    }\n  }) // Do not show days of other months in month page. Default = false\n  ,\n  hideExtraDays: true // If hideArrows=false and hideExtraDays=false do not switch month when tapping on greyed out\n  // day from another month that is visible in calendar page. Default = false\n  ,\n  disableMonthChange: true // If firstDay=1 week starts from Monday. Note that dayNames and dayNamesShort should still start from Sunday.\n  ,\n  firstDay: 1 // Hide day names. Default = false\n  ,\n  hideDayNames: true // Show week numbers to the left. Default = false\n  ,\n  showWeekNumbers: true // Handler which gets executed when press arrow icon left. It receive a callback can go back month\n  ,\n  onPressArrowLeft: subtractMonth => subtractMonth() // Handler which gets executed when press arrow icon right. It receive a callback can go next month\n  ,\n  onPressArrowRight: addMonth => addMonth() // Disable left arrow. Default = false\n  ,\n  disableArrowLeft: true // Disable right arrow. Default = false\n  ,\n  disableArrowRight: true // Disable all touch events for disabled days. can be override with disableTouchEvent in markedDates\n  ,\n  disableAllTouchEventsForDisabledDays: true // Replace default month and year title with custom one. the function receive a date as parameter.\n  ,\n  renderHeader: date => {\n    /*Return JSX*/\n  } // Enable the option to swipe between months. Default = false\n  ,\n  enableSwipeMonths: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 1\n  }\n}); // import moment from 'moment';\n// import './calendar.css';\n// export default function Calendar() {\n//     const [calendar , setCalendar] = useState([]);\n//     const [value , setValue] = useState(moment());\n//     const startDay = value.clone().startOf('month').startOf('week');\n//     const endDay = value.clone().endOf('month').endOf('week');\n//     useEffect(() => {\n//         const day = startDay.clone().subtract(1, 'day')\n//         const a = []\n//         while(day.isBefore(endDay, 'day')) {\n//             a.push(\n//                 Array(7)\n//                     .fill(0)\n//                     .map(() => day.add(1, 'day').clone())\n//             );\n//         }\n//         setCalendar(a);\n//     }, [value])\n//     return ( \n//         <div className='calendar'>\n//             {calendar.map((week) => (\n//                 <div>\n//                     {week.map((day) => (\n//                         <div  className='day' onClick={() => setValue(day)}>\n//                             <div  className={value.isSame(day, \"day\" ? \"selected\" : '')}>\n//                                     {day.format('D').toString()}\n//                             </div>\n//                         </div>\n//                     ))}\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// }","map":{"version":3,"sources":["C:/Users/jdk17/Desktop/test/kingfisher-kayaking/src/calendar/index.jsx"],"names":["React","useState","useEffect","Calendar","CalendarList","Agenda","day","console","log","month","direction","subtractMonth","addMonth","date"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,QAAR,EAAkBC,YAAlB,EAAgCC,MAAhC,QAA6C,wBAA7C;;AAGA;AAAA,oBAAC,QAAD,CACE;AADF;AAEE,EAAA,OAAO,EAAE,YAFX,CAGE;AAHF;AAIE,EAAA,OAAO,EAAE,YAJX,CAKE;AALF;AAME,EAAA,OAAO,EAAE,YANX,CAOE;AAPF;AAQE,EAAA,UAAU,EAAGC,GAAD,IAAS;AAACC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,GAA5B;AAAiC,GARzD,CASE;AATF;AAUE,EAAA,cAAc,EAAGA,GAAD,IAAS;AAACC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,GAA5B;AAAiC,GAV7D,CAWE;AAXF;AAYE,EAAA,WAAW,EAAE,SAZf,CAaE;AAbF;AAcE,EAAA,aAAa,EAAGG,KAAD,IAAW;AAACF,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BC,KAA7B;AAAoC,GAdjE,CAeE;AAfF;AAgBE,EAAA,UAAU,EAAE,IAhBd,CAiBE;AAjBF;AAkBE,EAAA,WAAW,EAAGC,SAAD,iBAAgB,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlB/B,CAmBE;AAnBF;AAoBE,EAAA,aAAa,EAAE,IApBjB,CAqBE;AACA;AAtBF;AAuBE,EAAA,kBAAkB,EAAE,IAvBtB,CAwBE;AAxBF;AAyBE,EAAA,QAAQ,EAAE,CAzBZ,CA0BE;AA1BF;AA2BE,EAAA,YAAY,EAAE,IA3BhB,CA4BE;AA5BF;AA6BE,EAAA,eAAe,EAAE,IA7BnB,CA8BE;AA9BF;AA+BE,EAAA,gBAAgB,EAAEC,aAAa,IAAIA,aAAa,EA/BlD,CAgCE;AAhCF;AAiCE,EAAA,iBAAiB,EAAEC,QAAQ,IAAIA,QAAQ,EAjCzC,CAkCE;AAlCF;AAmCE,EAAA,gBAAgB,EAAE,IAnCpB,CAoCE;AApCF;AAqCE,EAAA,iBAAiB,EAAE,IArCrB,CAsCE;AAtCF;AAuCE,EAAA,oCAAoC,EAAE,IAvCxC,CAwCE;AAxCF;AAyCE,EAAA,YAAY,EAAGC,IAAD,IAAU;AAAC;AAAe,GAzC1C,CA0CE;AA1CF;AA2CE,EAAA,iBAAiB,EAAE,IA3CrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G,CA8CA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport {Calendar, CalendarList, Agenda} from 'react-native-calendars';\r\n\r\n\r\n<Calendar\r\n  // Initially visible month. Default = Date()\r\n  current={'2012-03-01'}\r\n  // Minimum date that can be selected, dates before minDate will be grayed out. Default = undefined\r\n  minDate={'2012-05-10'}\r\n  // Maximum date that can be selected, dates after maxDate will be grayed out. Default = undefined\r\n  maxDate={'2012-05-30'}\r\n  // Handler which gets executed on day press. Default = undefined\r\n  onDayPress={(day) => {console.log('selected day', day)}}\r\n  // Handler which gets executed on day long press. Default = undefined\r\n  onDayLongPress={(day) => {console.log('selected day', day)}}\r\n  // Month format in calendar title. Formatting values: http://arshaw.com/xdate/#Formatting\r\n  monthFormat={'yyyy MM'}\r\n  // Handler which gets executed when visible month changes in calendar. Default = undefined\r\n  onMonthChange={(month) => {console.log('month changed', month)}}\r\n  // Hide month navigation arrows. Default = false\r\n  hideArrows={true}\r\n  // Replace default arrows with custom ones (direction can be 'left' or 'right')\r\n  renderArrow={(direction) => (<Arrow/>)}\r\n  // Do not show days of other months in month page. Default = false\r\n  hideExtraDays={true}\r\n  // If hideArrows=false and hideExtraDays=false do not switch month when tapping on greyed out\r\n  // day from another month that is visible in calendar page. Default = false\r\n  disableMonthChange={true}\r\n  // If firstDay=1 week starts from Monday. Note that dayNames and dayNamesShort should still start from Sunday.\r\n  firstDay={1}\r\n  // Hide day names. Default = false\r\n  hideDayNames={true}\r\n  // Show week numbers to the left. Default = false\r\n  showWeekNumbers={true}\r\n  // Handler which gets executed when press arrow icon left. It receive a callback can go back month\r\n  onPressArrowLeft={subtractMonth => subtractMonth()}\r\n  // Handler which gets executed when press arrow icon right. It receive a callback can go next month\r\n  onPressArrowRight={addMonth => addMonth()}\r\n  // Disable left arrow. Default = false\r\n  disableArrowLeft={true}\r\n  // Disable right arrow. Default = false\r\n  disableArrowRight={true}\r\n  // Disable all touch events for disabled days. can be override with disableTouchEvent in markedDates\r\n  disableAllTouchEventsForDisabledDays={true}\r\n  // Replace default month and year title with custom one. the function receive a date as parameter.\r\n  renderHeader={(date) => {/*Return JSX*/}}\r\n  // Enable the option to swipe between months. Default = false\r\n  enableSwipeMonths={true}\r\n/>\r\n\r\n// import moment from 'moment';\r\n// import './calendar.css';\r\n\r\n// export default function Calendar() {\r\n//     const [calendar , setCalendar] = useState([]);\r\n//     const [value , setValue] = useState(moment());\r\n    \r\n//     const startDay = value.clone().startOf('month').startOf('week');\r\n//     const endDay = value.clone().endOf('month').endOf('week');\r\n\r\n//     useEffect(() => {\r\n//         const day = startDay.clone().subtract(1, 'day')\r\n//         const a = []\r\n//         while(day.isBefore(endDay, 'day')) {\r\n//             a.push(\r\n//                 Array(7)\r\n//                     .fill(0)\r\n//                     .map(() => day.add(1, 'day').clone())\r\n//             );\r\n//         }\r\n//         setCalendar(a);\r\n//     }, [value])\r\n\r\n//     return ( \r\n//         <div className='calendar'>\r\n//             {calendar.map((week) => (\r\n//                 <div>\r\n//                     {week.map((day) => (\r\n//                         <div  className='day' onClick={() => setValue(day)}>\r\n//                             <div  className={value.isSame(day, \"day\" ? \"selected\" : '')}>\r\n//                                     {day.format('D').toString()}\r\n//                             </div>\r\n//                         </div>\r\n//                     ))}\r\n//                 </div>\r\n//             ))}\r\n//         </div>\r\n//     );\r\n// }"]},"metadata":{},"sourceType":"module"}