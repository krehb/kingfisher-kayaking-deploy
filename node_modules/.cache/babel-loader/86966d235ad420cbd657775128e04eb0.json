{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jdk17\\\\Desktop\\\\KingFisher\\\\kingfisher-kayaking\\\\src\\\\Componets\\\\weather\\\\weather.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Col, Container, Row, Spinner } from 'react-bootstrap';\nimport Chartjs from 'chart.js';\nimport moment from 'moment';\nconst url = 'http://api.openweathermap.org/data/2.5/forecast?q=urbana&appid=4ccd9d42e589371f8ea88443f33536f9&units=imperial';\n\nconst Chart = () => {\n  const chartContainer = useRef(null);\n  const [chartInstance, setChartInstance] = useState(null);\n  const weather = useState([], [], [], [], []);\n  const now = moment();\n  const today = useState(now.format('dddd'));\n  const tomorrow = useState(now.add(1, 'days').format('dddd'));\n  const twoDaysAway = useState(now.add(2, 'days').format('dddd'));\n  useEffect(() => {\n    //fetching data && rendering chart\n    async function get() {\n      const response = await fetch(url);\n      const data = await response.json();\n      console.log(data); //rendering chart\n\n      if (chartContainer && chartContainer.current) {\n        const newChartInstance = new Chartjs(chartContainer.current, chartConfig);\n        setChartInstance(newChartInstance);\n      }\n\n      console.log('data returned');\n    }\n\n    get();\n  }, [chartContainer]);\n  const chartConfig = {\n    type: 'line',\n    data: {\n      datasets: [{\n        data: [100, 42, 40, 30, 35, 40, 43],\n        label: 'Temperture Forcast (C)',\n        backgroundColor: '#fde17e',\n        // This binds the dataset to the left y axis\n        yAxisID: 'left-y-axis'\n      }, {\n        data: [0.10, 0.20, 0.30, 0.30, 0.30, 0, 0.20],\n        label: 'Chance of Rain (%)',\n        backgroundColor: '#4DC3FF',\n        // This binds the dataset to the right y axis\n        yAxisID: 'right-y-axis'\n      }],\n      labels: [today[0], tomorrow[0], twoDaysAway[0], 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    },\n    options: {\n      scales: {\n        yAxes: [{\n          id: 'left-y-axis',\n          type: 'linear',\n          position: 'left'\n        }, {\n          id: 'right-y-axis',\n          type: 'linear',\n          position: 'right'\n        }]\n      }\n    }\n  };\n  let renderChart = null;\n\n  if (true) {\n    renderChart = /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: chartContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    })));\n  }\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }, \"Weather App\"))), renderChart);\n};\n\nexport default Chart;","map":{"version":3,"sources":["C:/Users/jdk17/Desktop/KingFisher/kingfisher-kayaking/src/Componets/weather/weather.js"],"names":["React","useState","useEffect","useRef","Col","Container","Row","Spinner","Chartjs","moment","url","Chart","chartContainer","chartInstance","setChartInstance","weather","now","today","format","tomorrow","add","twoDaysAway","get","response","fetch","data","json","console","log","current","newChartInstance","chartConfig","type","datasets","label","backgroundColor","yAxisID","labels","options","scales","yAxes","id","position","renderChart"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Col, Container, Row, Spinner } from 'react-bootstrap';\r\nimport Chartjs from 'chart.js';\r\nimport moment from 'moment';\r\n\r\n\r\n\r\nconst url = 'http://api.openweathermap.org/data/2.5/forecast?q=urbana&appid=4ccd9d42e589371f8ea88443f33536f9&units=imperial'\r\n\r\n\r\nconst Chart = () => {\r\n  const chartContainer = useRef(null);\r\n  const [chartInstance, setChartInstance] = useState(null);\r\n\r\n  const weather = useState([],[],[],[],[])\r\n\r\n  const now = moment();\r\n  const today = useState(now.format('dddd'))\r\n  const tomorrow = useState(now.add(1, 'days').format('dddd'))\r\n  const twoDaysAway  = useState(now.add(2, 'days').format('dddd'))\r\n\r\n  useEffect(() => {\r\n    //fetching data && rendering chart\r\n    async function get() {\r\n\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n    \r\n        console.log(data)    \r\n\r\n        \r\n        //rendering chart\r\n        if (chartContainer && chartContainer.current) {\r\n            const newChartInstance = new Chartjs(chartContainer.current, chartConfig);\r\n            setChartInstance(newChartInstance);\r\n        }\r\n        console.log('data returned')\r\n\r\n    }\r\n    get();\r\n\r\n  }, [chartContainer]);\r\n\r\n\r\n\r\n\r\n  const chartConfig = {\r\n    type: 'line',\r\n        data: {\r\n        datasets: [{\r\n            data: [100, 42, 40, 30, 35, 40, 43],\r\n            label: 'Temperture Forcast (C)',\r\n            backgroundColor: '#fde17e',\r\n    \r\n            // This binds the dataset to the left y axis\r\n            yAxisID: 'left-y-axis'\r\n        }, {\r\n            data: [0.10, 0.20, 0.30, 0.30, 0.30, 0, 0.20],\r\n            label: 'Chance of Rain (%)',\r\n            backgroundColor: '#4DC3FF',\r\n    \r\n            // This binds the dataset to the right y axis\r\n            yAxisID: 'right-y-axis'\r\n        }],\r\n        labels: [today[0], tomorrow[0], twoDaysAway[0], 'Wednesday', 'Thursday', 'Friday', 'Saturday']\r\n    },\r\n        options: {\r\n            scales: {\r\n                yAxes: [{\r\n                    id: 'left-y-axis',\r\n                    type: 'linear',\r\n                    position: 'left'\r\n                }, {\r\n                    id: 'right-y-axis',\r\n                    type: 'linear',\r\n                    position: 'right'\r\n                }]\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  let renderChart = null\r\n  if (true) {\r\n      renderChart = (\r\n        <Row>\r\n            <Col>\r\n                <canvas ref={chartContainer} />\r\n            </Col>\r\n        </Row>\r\n      )\r\n    } \r\n\r\n\r\n  return (\r\n    <Container>\r\n        <Row>\r\n            <Col sm={4} ></Col>\r\n            <Col>\r\n                <h4>Weather App</h4>\r\n                {/* <button onClick={testHandler} >test</button> */}\r\n            </Col>\r\n        </Row>\r\n        {renderChart}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Chart;"]},"metadata":{},"sourceType":"module"}