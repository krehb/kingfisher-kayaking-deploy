{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jdk17\\\\Desktop\\\\KingFisher\\\\kingfisher-kayaking\\\\src\\\\Componets\\\\weather\\\\weather.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Col, Container, Row, Spinner } from 'react-bootstrap';\nimport Chartjs from 'chart.js';\nimport moment from 'moment';\nconst url7day = 'https://api.openweathermap.org/data/2.5/onecall?lat=40.1105556&lon=-88.2072222&units=imperial&appid=4ccd9d42e589371f8ea88443f33536f9';\nconst url = 'http://api.openweathermap.org/data/2.5/forecast?q=urbana&appid=4ccd9d42e589371f8ea88443f33536f9&units=imperial';\n\nconst Chart = () => {\n  const chartContainer = useRef(null);\n  const [chartInstance, setChartInstance] = useState(null);\n  const weather = useState([[0, 1, 2, 3, 4, 5, 6, 7], [], [], [], []]);\n  const now = moment();\n  const today = useState(now.format('dddd'));\n  const tomorrow = useState(now.add(1, 'days').format('dddd'));\n  const twoDaysAway = useState(now.add(1, 'days').format('dddd'));\n  const threeDaysAway = useState(now.add(1, 'days').format('dddd'));\n  const fourDaysAway = useState(now.add(1, 'days').format('dddd'));\n  useEffect(() => {\n    //fetching data && rendering chart\n    async function get() {\n      const response = await fetch(url7day);\n      const data = await response.json();\n      console.log(data);\n      console.log(data.daily[0].temp); // console.log(data.list[0].weather[0].main)\n      // console.log(data.list[0].dt_txt)\n      //rendering chart\n\n      if (chartContainer && chartContainer.current) {\n        const newChartInstance = new Chartjs(chartContainer.current, chartConfig);\n        setChartInstance(newChartInstance);\n      }\n\n      console.log('data returned');\n    }\n\n    get();\n  }, [chartContainer]);\n  const chartConfig = {\n    type: 'line',\n    data: {\n      datasets: [{\n        data: [weather[0][0][0], weather[0][0][1], weather[0][0][2], weather[0][0][3], weather[0][0][4], weather[0][0][5], weather[0][0][6], weather[0][0][7], weather[0][0][0], weather[0][0][1], weather[0][0][2], weather[0][0][3], weather[0][0][4], weather[0][0][5], weather[0][0][6], weather[0][0][7], weather[0][0][0], weather[0][0][1], weather[0][0][2], weather[0][0][3], weather[0][0][4], weather[0][0][5], weather[0][0][6], weather[0][0][7]],\n        label: 'Temperture Forcast (C)',\n        backgroundColor: '#fde17e',\n        // This binds the dataset to the left y axis\n        yAxisID: 'left-y-axis'\n      }, {\n        data: [0.10, 0.20, 0.30, 0.30, 0.30, 0, 0.20],\n        label: 'Chance of Rain (%)',\n        backgroundColor: '#4DC3FF',\n        // This binds the dataset to the right y axis\n        yAxisID: 'right-y-axis'\n      }],\n      labels: [today[0], tomorrow[0], twoDaysAway[0], threeDaysAway[0], fourDaysAway[0]]\n    },\n    options: {\n      scales: {\n        yAxes: [{\n          id: 'left-y-axis',\n          type: 'linear',\n          position: 'left'\n        }, {\n          id: 'right-y-axis',\n          type: 'linear',\n          position: 'right'\n        }]\n      }\n    }\n  };\n  let renderChart = null;\n\n  if (true) {\n    renderChart = /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: chartContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }\n    })));\n  }\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }, \"Weather App\"))), renderChart);\n};\n\nexport default Chart;","map":{"version":3,"sources":["C:/Users/jdk17/Desktop/KingFisher/kingfisher-kayaking/src/Componets/weather/weather.js"],"names":["React","useState","useEffect","useRef","Col","Container","Row","Spinner","Chartjs","moment","url7day","url","Chart","chartContainer","chartInstance","setChartInstance","weather","now","today","format","tomorrow","add","twoDaysAway","threeDaysAway","fourDaysAway","get","response","fetch","data","json","console","log","daily","temp","current","newChartInstance","chartConfig","type","datasets","label","backgroundColor","yAxisID","labels","options","scales","yAxes","id","position","renderChart"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Col, Container, Row, Spinner } from 'react-bootstrap';\r\nimport Chartjs from 'chart.js';\r\nimport moment from 'moment';\r\n\r\nconst url7day = 'https://api.openweathermap.org/data/2.5/onecall?lat=40.1105556&lon=-88.2072222&units=imperial&appid=4ccd9d42e589371f8ea88443f33536f9'\r\n\r\nconst url = 'http://api.openweathermap.org/data/2.5/forecast?q=urbana&appid=4ccd9d42e589371f8ea88443f33536f9&units=imperial'\r\n\r\n\r\nconst Chart = () => {\r\n  const chartContainer = useRef(null);\r\n  const [chartInstance, setChartInstance] = useState(null);\r\n\r\n  const weather = useState([[0,1,2,3,4,5,6,7],[],[],[],[]])\r\n\r\n  const now = moment();\r\n  const today = useState(now.format('dddd'))\r\n  const tomorrow = useState(now.add(1, 'days').format('dddd'))\r\n  const twoDaysAway  = useState(now.add(1, 'days').format('dddd'))\r\n  const threeDaysAway  = useState(now.add(1, 'days').format('dddd'))\r\n  const fourDaysAway  = useState(now.add(1, 'days').format('dddd'))\r\n\r\n  useEffect(() => {\r\n    //fetching data && rendering chart\r\n    async function get() {\r\n\r\n        const response = await fetch(url7day);\r\n        const data = await response.json();\r\n    \r\n        console.log(data)  \r\n        console.log(data.daily[0].temp)    \r\n        // console.log(data.list[0].weather[0].main)\r\n        // console.log(data.list[0].dt_txt)\r\n        \r\n        //rendering chart\r\n        if (chartContainer && chartContainer.current) {\r\n            const newChartInstance = new Chartjs(chartContainer.current, chartConfig);\r\n            setChartInstance(newChartInstance);\r\n        }\r\n        console.log('data returned')\r\n\r\n    }\r\n    get();\r\n\r\n  }, [chartContainer]);\r\n\r\n\r\n\r\n\r\n  const chartConfig = {\r\n    type: 'line',\r\n        data: {\r\n        datasets: [{\r\n            data: [weather[0][0][0], weather[0][0][1], weather[0][0][2], weather[0][0][3], weather[0][0][4], weather[0][0][5], weather[0][0][6],weather[0][0][7],weather[0][0][0], weather[0][0][1], weather[0][0][2], weather[0][0][3], weather[0][0][4], weather[0][0][5], weather[0][0][6],weather[0][0][7],weather[0][0][0], weather[0][0][1], weather[0][0][2], weather[0][0][3], weather[0][0][4], weather[0][0][5], weather[0][0][6],weather[0][0][7],],\r\n            label: 'Temperture Forcast (C)',\r\n            backgroundColor: '#fde17e',\r\n    \r\n            // This binds the dataset to the left y axis\r\n            yAxisID: 'left-y-axis'\r\n        }, {\r\n            data: [0.10, 0.20, 0.30, 0.30, 0.30, 0, 0.20],\r\n            label: 'Chance of Rain (%)',\r\n            backgroundColor: '#4DC3FF',\r\n    \r\n            // This binds the dataset to the right y axis\r\n            yAxisID: 'right-y-axis'\r\n        }],\r\n        labels: [today[0], tomorrow[0], twoDaysAway[0], threeDaysAway[0], fourDaysAway[0],]\r\n    },\r\n        options: {\r\n            scales: {\r\n                yAxes: [{\r\n                    id: 'left-y-axis',\r\n                    type: 'linear',\r\n                    position: 'left'\r\n                }, {\r\n                    id: 'right-y-axis',\r\n                    type: 'linear',\r\n                    position: 'right'\r\n                }]\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  let renderChart = null\r\n  if (true) {\r\n      renderChart = (\r\n        <Row>\r\n            <Col>\r\n                <canvas ref={chartContainer} />\r\n            </Col>\r\n        </Row>\r\n      )\r\n    } \r\n\r\n\r\n  return (\r\n    <Container>\r\n        <Row>\r\n            <Col sm={4} ></Col>\r\n            <Col>\r\n                <h4>Weather App</h4>\r\n                {/* <button onClick={testHandler} >test</button> */}\r\n            </Col>\r\n        </Row>\r\n        {renderChart}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Chart;"]},"metadata":{},"sourceType":"module"}