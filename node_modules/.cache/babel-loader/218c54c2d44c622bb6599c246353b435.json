{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jdk17\\\\Desktop\\\\KingFisher\\\\kingfisher-kayaking\\\\src\\\\Componets\\\\weather\\\\weather.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport Chartjs from 'chart.js';\nconst unit1 = null;\nconst chartConfig = {\n  type: 'line',\n  data: {\n    datasets: [{\n      data: [1, 42, 40, 30, 35, 40, 43],\n      label: 'Temperture Forcast (C)',\n      backgroundColor: '#FF9580',\n      // This binds the dataset to the left y axis\n      yAxisID: 'left-y-axis'\n    }, {\n      data: [0.10, 0.20, 0.30, 0.30, 0.30, 0, 0.20],\n      label: 'Chance of Rain (%)',\n      backgroundColor: '#4DC3FF',\n      // This binds the dataset to the right y axis\n      yAxisID: 'right-y-axis'\n    }],\n    labels: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n  },\n  options: {\n    scales: {\n      yAxes: [{\n        id: 'left-y-axis',\n        type: 'linear',\n        position: 'left'\n      }, {\n        id: 'right-y-axis',\n        type: 'linear',\n        position: 'right'\n      }]\n    }\n  }\n};\nconst url = 'http://api.openweathermap.org/data/2.5/forecast?q=urbana&appid=4ccd9d42e589371f8ea88443f33536f9&units=imperial';\n\nconst Chart = () => {\n  const chartContainer = useRef(null);\n  const [chartInstance, setChartInstance] = useState(null);\n  useEffect(() => {\n    // if (chartContainer && chartContainer.current) {\n    //   const newChartInstance = new Chartjs(chartContainer.current, chartConfig);\n    //   setChartInstance(newChartInstance);\n    // }\n    console.log('loaded');\n\n    async function get() {\n      const response = await fetch(url);\n      const data = await response.json();\n      console.log(data.list[0].main.temp);\n    }\n\n    get();\n  }, [chartContainer]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, \"Weather App\"))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: chartContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }))));\n};\n\nexport default Chart;","map":{"version":3,"sources":["C:/Users/jdk17/Desktop/KingFisher/kingfisher-kayaking/src/Componets/weather/weather.js"],"names":["React","useState","useEffect","useRef","Col","Container","Row","Chartjs","unit1","chartConfig","type","data","datasets","label","backgroundColor","yAxisID","labels","options","scales","yAxes","id","position","url","Chart","chartContainer","chartInstance","setChartInstance","console","log","get","response","fetch","json","list","main","temp"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,EAAoCC,MAApC,QAAkD,OAAlD;AACA,SAASC,GAAT,EAAcC,SAAd,EAAyBC,GAAzB,QAAoC,iBAApC;AACA,OAAOC,OAAP,MAAoB,UAApB;AAEA,MAAMC,KAAK,GAAG,IAAd;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,IAAI,EAAE,MADY;AAElBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE,CAAC;AACPD,MAAAA,IAAI,EAAE,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,EAAhB,EAAoB,EAApB,EAAwB,EAAxB,CADC;AAEPE,MAAAA,KAAK,EAAE,wBAFA;AAGPC,MAAAA,eAAe,EAAE,SAHV;AAKP;AACAC,MAAAA,OAAO,EAAE;AANF,KAAD,EAOP;AACCJ,MAAAA,IAAI,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,CAA/B,EAAkC,IAAlC,CADP;AAECE,MAAAA,KAAK,EAAE,oBAFR;AAGCC,MAAAA,eAAe,EAAE,SAHlB;AAKC;AACAC,MAAAA,OAAO,EAAE;AANV,KAPO,CADN;AAgBJC,IAAAA,MAAM,EAAE,CAAC,QAAD,EAAU,QAAV,EAAoB,SAApB,EAA+B,WAA/B,EAA4C,UAA5C,EAAwD,QAAxD,EAAkE,UAAlE;AAhBJ,GAFY;AAoBlBC,EAAAA,OAAO,EAAE;AACHC,IAAAA,MAAM,EAAE;AACJC,MAAAA,KAAK,EAAE,CAAC;AACJC,QAAAA,EAAE,EAAE,aADA;AAEJV,QAAAA,IAAI,EAAE,QAFF;AAGJW,QAAAA,QAAQ,EAAE;AAHN,OAAD,EAIJ;AACCD,QAAAA,EAAE,EAAE,cADL;AAECV,QAAAA,IAAI,EAAE,QAFP;AAGCW,QAAAA,QAAQ,EAAE;AAHX,OAJI;AADH;AADL;AApBS,CAApB;AAmCA,MAAMC,GAAG,GAAG,gHAAZ;;AAGA,MAAMC,KAAK,GAAG,MAAM;AAClB,QAAMC,cAAc,GAAGrB,MAAM,CAAC,IAAD,CAA7B;AACA,QAAM,CAACsB,aAAD,EAAgBC,gBAAhB,IAAoCzB,QAAQ,CAAC,IAAD,CAAlD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA;AACA;AAGAyB,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;;AAEA,mBAAeC,GAAf,GAAqB;AAEjB,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAD,CAA5B;AACA,YAAMX,IAAI,GAAG,MAAMmB,QAAQ,CAACE,IAAT,EAAnB;AAEAL,MAAAA,OAAO,CAACC,GAAR,CAAYjB,IAAI,CAACsB,IAAL,CAAU,CAAV,EAAaC,IAAb,CAAkBC,IAA9B;AAEH;;AAEDN,IAAAA,GAAG;AAIJ,GAtBQ,EAsBN,CAACL,cAAD,CAtBM,CAAT;AAwBA,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,CAFJ,CADJ,eAOI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAQ,IAAA,GAAG,EAAEA,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,CAPJ,CADF;AAeD,CA3CD;;AA6CA,eAAeD,KAAf","sourcesContent":["import React, { useState,useEffect, useRef } from 'react';\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\nimport Chartjs from 'chart.js';\r\n\r\nconst unit1 = null\r\n\r\nconst chartConfig = {\r\n  type: 'line',\r\n  data: {\r\n    datasets: [{\r\n        data: [1, 42, 40, 30, 35, 40, 43],\r\n        label: 'Temperture Forcast (C)',\r\n        backgroundColor: '#FF9580',\r\n\r\n        // This binds the dataset to the left y axis\r\n        yAxisID: 'left-y-axis'\r\n    }, {\r\n        data: [0.10, 0.20, 0.30, 0.30, 0.30, 0, 0.20],\r\n        label: 'Chance of Rain (%)',\r\n        backgroundColor: '#4DC3FF',\r\n\r\n        // This binds the dataset to the right y axis\r\n        yAxisID: 'right-y-axis'\r\n    }],\r\n    labels: ['Sunday','Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\r\n},\r\n  options: {\r\n        scales: {\r\n            yAxes: [{\r\n                id: 'left-y-axis',\r\n                type: 'linear',\r\n                position: 'left'\r\n            }, {\r\n                id: 'right-y-axis',\r\n                type: 'linear',\r\n                position: 'right'\r\n            }]\r\n        }\r\n    }\r\n};\r\n\r\nconst url = 'http://api.openweathermap.org/data/2.5/forecast?q=urbana&appid=4ccd9d42e589371f8ea88443f33536f9&units=imperial'\r\n\r\n\r\nconst Chart = () => {\r\n  const chartContainer = useRef(null);\r\n  const [chartInstance, setChartInstance] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // if (chartContainer && chartContainer.current) {\r\n    //   const newChartInstance = new Chartjs(chartContainer.current, chartConfig);\r\n    //   setChartInstance(newChartInstance);\r\n    // }\r\n\r\n\r\n    console.log('loaded')\r\n\r\n    async function get() {\r\n\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n    \r\n        console.log(data.list[0].main.temp)    \r\n    \r\n    }\r\n    \r\n    get();\r\n\r\n\r\n\r\n  }, [chartContainer]);\r\n\r\n  return (\r\n    <Container>\r\n        <Row>\r\n            <Col sm={4} ></Col>\r\n            <Col>\r\n                <h4>Weather App</h4>\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col>\r\n                <canvas ref={chartContainer} />\r\n            </Col>\r\n        </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Chart;"]},"metadata":{},"sourceType":"module"}