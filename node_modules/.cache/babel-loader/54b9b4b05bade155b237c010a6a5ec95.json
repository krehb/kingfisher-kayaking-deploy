{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jdk17\\\\Desktop\\\\KingFisher\\\\kingfisher-kayaking\\\\src\\\\Componets\\\\weather\\\\weather.js\";\nimport React, { useState, useRef } from 'react';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport Chartjs from 'chart.js';\nimport moment from 'moment';\nconst url = 'http://api.openweathermap.org/data/2.5/forecast?q=urbana&appid=4ccd9d42e589371f8ea88443f33536f9&units=imperial';\n\nconst Chart = () => {\n  const chartContainer = useRef(null);\n  const [chartInstance, setChartInstance] = useState(null);\n  const test = useState({\n    unit: 20\n  });\n  const test2 = useState({\n    unit: moment().format('dddd')\n  }); //   useEffect(() => {\n  //     // if (chartContainer && chartContainer.current) {\n  //     //     const newChartInstance = new Chartjs(chartContainer.current, chartConfig);\n  //     //     setChartInstance(newChartInstance);\n  //     // }\n  //     // async function get() {\n  //     //     const response = await fetch(url);\n  //     //     const data = await response.json();\n  //     //     console.log(data.list[0].main.temp)    \n  //     //     test[1]({unit: data.list[0].main.temp})\n  //     // }\n  //     // get();\n  //   }, [chartContainer]);\n\n  const chartConfig = {\n    type: 'line',\n    data: {\n      datasets: [{\n        data: [test[0].unit, 42, 40, 30, 35, 40, 43],\n        label: 'Temperture Forcast (C)',\n        backgroundColor: '#fde17e',\n        // This binds the dataset to the left y axis\n        yAxisID: 'left-y-axis'\n      }, {\n        data: [0.10, 0.20, 0.30, 0.30, 0.30, 0, 0.20],\n        label: 'Chance of Rain (%)',\n        backgroundColor: '#4DC3FF',\n        // This binds the dataset to the right y axis\n        yAxisID: 'right-y-axis'\n      }],\n      labels: [test2[0].unit, 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    },\n    options: {\n      scales: {\n        yAxes: [{\n          id: 'left-y-axis',\n          type: 'linear',\n          position: 'left'\n        }, {\n          id: 'right-y-axis',\n          type: 'linear',\n          position: 'right'\n        }]\n      }\n    }\n  }; //   const testHandler = () => {\n  //     if (chartContainer && chartContainer.current) {\n  //         const newChartInstance = new Chartjs(chartContainer.current, chartConfig);\n  //         setChartInstance(newChartInstance);\n  //     }\n  //   }\n\n  let renderChart = null;\n\n  if (true) {\n    renderChart = /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: chartContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    })));\n  }\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  }, \"Weather App\"))), renderChart);\n};\n\nexport default Chart;","map":{"version":3,"sources":["C:/Users/jdk17/Desktop/KingFisher/kingfisher-kayaking/src/Componets/weather/weather.js"],"names":["React","useState","useRef","Col","Container","Row","Chartjs","moment","url","Chart","chartContainer","chartInstance","setChartInstance","test","unit","test2","format","chartConfig","type","data","datasets","label","backgroundColor","yAxisID","labels","options","scales","yAxes","id","position","renderChart"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\nimport Chartjs from 'chart.js';\r\nimport moment from 'moment';\r\n\r\n\r\n\r\nconst url = 'http://api.openweathermap.org/data/2.5/forecast?q=urbana&appid=4ccd9d42e589371f8ea88443f33536f9&units=imperial'\r\n\r\n\r\nconst Chart = () => {\r\n  const chartContainer = useRef(null);\r\n  const [chartInstance, setChartInstance] = useState(null);\r\n\r\n  const test = useState({unit: 20})\r\n  const test2 = useState({unit: moment().format('dddd')})\r\n\r\n\r\n//   useEffect(() => {\r\n\r\n//     // if (chartContainer && chartContainer.current) {\r\n//     //     const newChartInstance = new Chartjs(chartContainer.current, chartConfig);\r\n//     //     setChartInstance(newChartInstance);\r\n//     // }\r\n\r\n//     // async function get() {\r\n\r\n//     //     const response = await fetch(url);\r\n//     //     const data = await response.json();\r\n    \r\n//     //     console.log(data.list[0].main.temp)    \r\n//     //     test[1]({unit: data.list[0].main.temp})\r\n\r\n//     // }\r\n//     // get();\r\n\r\n//   }, [chartContainer]);\r\n\r\n\r\n\r\n\r\n  const chartConfig = {\r\n    type: 'line',\r\n        data: {\r\n        datasets: [{\r\n            data: [test[0].unit, 42, 40, 30, 35, 40, 43],\r\n            label: 'Temperture Forcast (C)',\r\n            backgroundColor: '#fde17e',\r\n    \r\n            // This binds the dataset to the left y axis\r\n            yAxisID: 'left-y-axis'\r\n        }, {\r\n            data: [0.10, 0.20, 0.30, 0.30, 0.30, 0, 0.20],\r\n            label: 'Chance of Rain (%)',\r\n            backgroundColor: '#4DC3FF',\r\n    \r\n            // This binds the dataset to the right y axis\r\n            yAxisID: 'right-y-axis'\r\n        }],\r\n        labels: [test2[0].unit,'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\r\n    },\r\n        options: {\r\n            scales: {\r\n                yAxes: [{\r\n                    id: 'left-y-axis',\r\n                    type: 'linear',\r\n                    position: 'left'\r\n                }, {\r\n                    id: 'right-y-axis',\r\n                    type: 'linear',\r\n                    position: 'right'\r\n                }]\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n//   const testHandler = () => {\r\n\r\n//     if (chartContainer && chartContainer.current) {\r\n//         const newChartInstance = new Chartjs(chartContainer.current, chartConfig);\r\n//         setChartInstance(newChartInstance);\r\n//     }\r\n//   }\r\n\r\n  let renderChart = null\r\n  if (true) {\r\n      renderChart = (\r\n        <Row>\r\n            <Col>\r\n                <canvas ref={chartContainer} />\r\n            </Col>\r\n        </Row>\r\n      )\r\n  }\r\n\r\n\r\n  return (\r\n    <Container>\r\n        <Row>\r\n            <Col sm={4} ></Col>\r\n            <Col>\r\n                <h4>Weather App</h4>\r\n                {/* <button onClick={testHandler} >test</button> */}\r\n            </Col>\r\n        </Row>\r\n        {renderChart}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Chart;"]},"metadata":{},"sourceType":"module"}