{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jdk17\\\\Desktop\\\\KingFisher\\\\kingfisher-kayaking\\\\src\\\\Componets\\\\weather\\\\weather.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport Chartjs from 'chart.js';\nconst url = 'http://api.openweathermap.org/data/2.5/forecast?q=urbana&appid=4ccd9d42e589371f8ea88443f33536f9&units=imperial';\n\nconst Chart = () => {\n  const chartContainer = useRef(null);\n  const [chartInstance, setChartInstance] = useState(null);\n  const test = useState({\n    unit: 20\n  });\n  useEffect(() => {\n    async function get() {\n      const response = await fetch(url);\n      const data = await response.json();\n      console.log(data.list[0].main.temp);\n    }\n\n    get();\n  }, [chartContainer]);\n  const chartConfig = {\n    type: 'line',\n    data: {\n      datasets: [{\n        data: [test[0].unit, 42, 40, 30, 35, 40, 43],\n        label: 'Temperture Forcast (C)',\n        backgroundColor: '#FF9580',\n        // This binds the dataset to the left y axis\n        yAxisID: 'left-y-axis'\n      }, {\n        data: [0.10, 0.20, 0.30, 0.30, 0.30, 0, 0.20],\n        label: 'Chance of Rain (%)',\n        backgroundColor: '#4DC3FF',\n        // This binds the dataset to the right y axis\n        yAxisID: 'right-y-axis'\n      }],\n      labels: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    },\n    options: {\n      scales: {\n        yAxes: [{\n          id: 'left-y-axis',\n          type: 'linear',\n          position: 'left'\n        }, {\n          id: 'right-y-axis',\n          type: 'linear',\n          position: 'right'\n        }]\n      }\n    }\n  };\n\n  const testHandler = () => {\n    test[1]({\n      unit: 100\n    });\n    console.log(test[0].unit);\n\n    if (chartContainer && chartContainer.current) {\n      const newChartInstance = new Chartjs(chartContainer.current, chartConfig);\n      setChartInstance(newChartInstance);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, \"Weather App\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: testHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, \"test\"))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: chartContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }))));\n};\n\nexport default Chart;","map":{"version":3,"sources":["C:/Users/jdk17/Desktop/KingFisher/kingfisher-kayaking/src/Componets/weather/weather.js"],"names":["React","useState","useEffect","useRef","Col","Container","Row","Chartjs","url","Chart","chartContainer","chartInstance","setChartInstance","test","unit","get","response","fetch","data","json","console","log","list","main","temp","chartConfig","type","datasets","label","backgroundColor","yAxisID","labels","options","scales","yAxes","id","position","testHandler","current","newChartInstance"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,EAAoCC,MAApC,QAAkD,OAAlD;AACA,SAASC,GAAT,EAAcC,SAAd,EAAyBC,GAAzB,QAAoC,iBAApC;AACA,OAAOC,OAAP,MAAoB,UAApB;AAIA,MAAMC,GAAG,GAAG,gHAAZ;;AAGA,MAAMC,KAAK,GAAG,MAAM;AAClB,QAAMC,cAAc,GAAGP,MAAM,CAAC,IAAD,CAA7B;AACA,QAAM,CAACQ,aAAD,EAAgBC,gBAAhB,IAAoCX,QAAQ,CAAC,IAAD,CAAlD;AAEA,QAAMY,IAAI,GAAGZ,QAAQ,CAAC;AAACa,IAAAA,IAAI,EAAE;AAAP,GAAD,CAArB;AAGAZ,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAea,GAAf,GAAqB;AAEjB,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAD,CAA5B;AACA,YAAMU,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACI,IAAL,CAAU,CAAV,EAAaC,IAAb,CAAkBC,IAA9B;AAEH;;AAEDT,IAAAA,GAAG;AAEJ,GAZQ,EAYN,CAACL,cAAD,CAZM,CAAT;AAiBA,QAAMe,WAAW,GAAG;AAClBC,IAAAA,IAAI,EAAE,MADY;AAElBR,IAAAA,IAAI,EAAE;AACJS,MAAAA,QAAQ,EAAE,CAAC;AACPT,QAAAA,IAAI,EAAE,CAACL,IAAI,CAAC,CAAD,CAAJ,CAAQC,IAAT,EAAe,EAAf,EAAmB,EAAnB,EAAuB,EAAvB,EAA2B,EAA3B,EAA+B,EAA/B,EAAmC,EAAnC,CADC;AAEPc,QAAAA,KAAK,EAAE,wBAFA;AAGPC,QAAAA,eAAe,EAAE,SAHV;AAKP;AACAC,QAAAA,OAAO,EAAE;AANF,OAAD,EAOP;AACCZ,QAAAA,IAAI,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,CAA/B,EAAkC,IAAlC,CADP;AAECU,QAAAA,KAAK,EAAE,oBAFR;AAGCC,QAAAA,eAAe,EAAE,SAHlB;AAKC;AACAC,QAAAA,OAAO,EAAE;AANV,OAPO,CADN;AAgBJC,MAAAA,MAAM,EAAE,CAAC,QAAD,EAAU,QAAV,EAAoB,SAApB,EAA+B,WAA/B,EAA4C,UAA5C,EAAwD,QAAxD,EAAkE,UAAlE;AAhBJ,KAFY;AAoBlBC,IAAAA,OAAO,EAAE;AACHC,MAAAA,MAAM,EAAE;AACJC,QAAAA,KAAK,EAAE,CAAC;AACJC,UAAAA,EAAE,EAAE,aADA;AAEJT,UAAAA,IAAI,EAAE,QAFF;AAGJU,UAAAA,QAAQ,EAAE;AAHN,SAAD,EAIJ;AACCD,UAAAA,EAAE,EAAE,cADL;AAECT,UAAAA,IAAI,EAAE,QAFP;AAGCU,UAAAA,QAAQ,EAAE;AAHX,SAJI;AADH;AADL;AApBS,GAApB;;AAqCA,QAAMC,WAAW,GAAG,MAAM;AACxBxB,IAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQ;AAACC,MAAAA,IAAI,EAAE;AAAP,KAAR;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYR,IAAI,CAAC,CAAD,CAAJ,CAAQC,IAApB;;AACA,QAAIJ,cAAc,IAAIA,cAAc,CAAC4B,OAArC,EAA8C;AAC1C,YAAMC,gBAAgB,GAAG,IAAIhC,OAAJ,CAAYG,cAAc,CAAC4B,OAA3B,EAAoCb,WAApC,CAAzB;AACAb,MAAAA,gBAAgB,CAAC2B,gBAAD,CAAhB;AACD;AACJ,GAPD;;AAaA,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,eAEI;AAAQ,IAAA,OAAO,EAAEF,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,CAFJ,CADJ,eAQI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAQ,IAAA,GAAG,EAAE3B,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,CARJ,CADF;AAgBD,CA1FD;;AA4FA,eAAeD,KAAf","sourcesContent":["import React, { useState,useEffect, useRef } from 'react';\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\nimport Chartjs from 'chart.js';\r\n\r\n\r\n\r\nconst url = 'http://api.openweathermap.org/data/2.5/forecast?q=urbana&appid=4ccd9d42e589371f8ea88443f33536f9&units=imperial'\r\n\r\n\r\nconst Chart = () => {\r\n  const chartContainer = useRef(null);\r\n  const [chartInstance, setChartInstance] = useState(null);\r\n\r\n  const test = useState({unit: 20})\r\n\r\n\r\n  useEffect(() => {\r\n    async function get() {\r\n\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n    \r\n        console.log(data.list[0].main.temp)    \r\n\r\n    }\r\n    \r\n    get();\r\n\r\n  }, [chartContainer]);\r\n\r\n\r\n\r\n\r\n  const chartConfig = {\r\n    type: 'line',\r\n    data: {\r\n      datasets: [{\r\n          data: [test[0].unit, 42, 40, 30, 35, 40, 43],\r\n          label: 'Temperture Forcast (C)',\r\n          backgroundColor: '#FF9580',\r\n  \r\n          // This binds the dataset to the left y axis\r\n          yAxisID: 'left-y-axis'\r\n      }, {\r\n          data: [0.10, 0.20, 0.30, 0.30, 0.30, 0, 0.20],\r\n          label: 'Chance of Rain (%)',\r\n          backgroundColor: '#4DC3FF',\r\n  \r\n          // This binds the dataset to the right y axis\r\n          yAxisID: 'right-y-axis'\r\n      }],\r\n      labels: ['Sunday','Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\r\n  },\r\n    options: {\r\n          scales: {\r\n              yAxes: [{\r\n                  id: 'left-y-axis',\r\n                  type: 'linear',\r\n                  position: 'left'\r\n              }, {\r\n                  id: 'right-y-axis',\r\n                  type: 'linear',\r\n                  position: 'right'\r\n              }]\r\n          }\r\n      }\r\n  };\r\n\r\n\r\n\r\n  const testHandler = () => {\r\n    test[1]({unit: 100})\r\n    console.log(test[0].unit)\r\n    if (chartContainer && chartContainer.current) {\r\n        const newChartInstance = new Chartjs(chartContainer.current, chartConfig);\r\n        setChartInstance(newChartInstance);\r\n      }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <Container>\r\n        <Row>\r\n            <Col sm={4} ></Col>\r\n            <Col>\r\n                <h4>Weather App</h4>\r\n                <button onClick={testHandler} >test</button>\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col>\r\n                <canvas ref={chartContainer} />\r\n            </Col>\r\n        </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Chart;"]},"metadata":{},"sourceType":"module"}