{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jdk17\\\\Desktop\\\\KingFisher\\\\kingfisher-kayaking\\\\src\\\\Componets\\\\weather\\\\weather.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Col, Container, Row, Spinner } from 'react-bootstrap';\nimport Chartjs from 'chart.js';\nimport moment from 'moment';\nconst url7day = 'https://api.openweathermap.org/data/2.5/onecall?lat=40.1105556&lon=-88.2072222&units=imperial&appid=4ccd9d42e589371f8ea88443f33536f9';\nconst url = 'http://api.openweathermap.org/data/2.5/forecast?q=urbana&appid=4ccd9d42e589371f8ea88443f33536f9&units=imperial';\n\nconst Chart = () => {\n  const chartContainer = useRef(null);\n  const [chartInstance, setChartInstance] = useState(null);\n  const [weather, setWeather] = useState(1);\n  const now = moment();\n  const today = useState(now.format('dddd'));\n  const tomorrow = useState(now.add(1, 'days').format('dddd'));\n  const twoDaysAway = useState(now.add(1, 'days').format('dddd'));\n  const threeDaysAway = useState(now.add(1, 'days').format('dddd'));\n  const fourDaysAway = useState(now.add(1, 'days').format('dddd'));\n  const fiveDaysAway = useState(now.add(1, 'days').format('dddd'));\n  const sixDaysAway = useState(now.add(1, 'days').format('dddd'));\n  useEffect(() => {\n    //fetching data && rendering chart\n    async function get() {// const response = await fetch(url7day);\n      // const data = await response.json();\n      // console.log(data)  \n      // console.log(data.daily[0].temp.day)\n      // console.log(data.daily[0].weather[0].main)    \n      //rendering chart\n    }\n\n    get();\n  }, [chartContainer]);\n  useEffect(() => {\n    setWeather(4);\n    setTimeout(() => {\n      // console.log('you can see me after 2 seconds')\n      // if (chartContainer && chartContainer.current) {\n      //     const newChartInstance = new Chartjs(chartContainer.current, chartConfig);\n      //     setChartInstance(newChartInstance);\n      // }\n      // console.log(weather)\n      const newChartInstance = new Chartjs(chartContainer.current, chartConfig);\n      setChartInstance(newChartInstance);\n    }, 2000);\n  }, []);\n\n  if (weather === 1) {\n    console.log('yes');\n  } else {\n    console.log('no');\n  }\n\n  const chartConfig = {\n    type: 'line',\n    data: {\n      datasets: [{\n        data: [],\n        label: 'Temperture Forcast (C)',\n        backgroundColor: '#fde17e',\n        // This binds the dataset to the left y axis\n        yAxisID: 'left-y-axis'\n      }, {\n        data: [0.10, 0.20, 0.30, 0.30, 0.30, 0, 0.20],\n        label: 'Chance of Rain (%)',\n        backgroundColor: '#4DC3FF',\n        // This binds the dataset to the right y axis\n        yAxisID: 'right-y-axis'\n      }],\n      labels: [today[0], tomorrow[0], twoDaysAway[0], threeDaysAway[0], fourDaysAway[0], fiveDaysAway[0], sixDaysAway[0]]\n    },\n    options: {\n      scales: {\n        yAxes: [{\n          id: 'left-y-axis',\n          type: 'linear',\n          position: 'left'\n        }, {\n          id: 'right-y-axis',\n          type: 'linear',\n          position: 'right'\n        }]\n      }\n    }\n  };\n  let renderChart = null;\n\n  if (true) {\n    renderChart = /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: chartContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }\n    })));\n  }\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }\n  }, \"Weather App\"))), renderChart);\n};\n\nexport default Chart;","map":{"version":3,"sources":["C:/Users/jdk17/Desktop/KingFisher/kingfisher-kayaking/src/Componets/weather/weather.js"],"names":["React","useState","useEffect","useRef","Col","Container","Row","Spinner","Chartjs","moment","url7day","url","Chart","chartContainer","chartInstance","setChartInstance","weather","setWeather","now","today","format","tomorrow","add","twoDaysAway","threeDaysAway","fourDaysAway","fiveDaysAway","sixDaysAway","get","setTimeout","newChartInstance","current","chartConfig","console","log","type","data","datasets","label","backgroundColor","yAxisID","labels","options","scales","yAxes","id","position","renderChart"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Col, Container, Row, Spinner } from 'react-bootstrap';\r\nimport Chartjs from 'chart.js';\r\nimport moment from 'moment';\r\n\r\nconst url7day = 'https://api.openweathermap.org/data/2.5/onecall?lat=40.1105556&lon=-88.2072222&units=imperial&appid=4ccd9d42e589371f8ea88443f33536f9'\r\n\r\nconst url = 'http://api.openweathermap.org/data/2.5/forecast?q=urbana&appid=4ccd9d42e589371f8ea88443f33536f9&units=imperial'\r\n\r\n\r\nconst Chart = () => {\r\n  const chartContainer = useRef(null);\r\n  const [chartInstance, setChartInstance] = useState(null);\r\n\r\n  const [weather, setWeather] = useState(1)\r\n\r\n  const now = moment();\r\n  const today = useState(now.format('dddd'))\r\n  const tomorrow = useState(now.add(1, 'days').format('dddd'))\r\n  const twoDaysAway  = useState(now.add(1, 'days').format('dddd'))\r\n  const threeDaysAway  = useState(now.add(1, 'days').format('dddd'))\r\n  const fourDaysAway  = useState(now.add(1, 'days').format('dddd'))\r\n  const fiveDaysAway  = useState(now.add(1, 'days').format('dddd'))\r\n  const sixDaysAway  = useState(now.add(1, 'days').format('dddd'))\r\n\r\n  useEffect(() => {\r\n    //fetching data && rendering chart\r\n    async function get() {\r\n\r\n        // const response = await fetch(url7day);\r\n        // const data = await response.json();\r\n    \r\n        // console.log(data)  \r\n        // console.log(data.daily[0].temp.day)\r\n        // console.log(data.daily[0].weather[0].main)    \r\n       \r\n        \r\n        //rendering chart\r\n\r\n\r\n        \r\n\r\n\r\n\r\n    }\r\n    get();\r\n\r\n  }, [chartContainer]);\r\n\r\n\r\n  useEffect(() => {\r\n    \r\n    setWeather(4)\r\n\r\n    setTimeout(() => {\r\n        // console.log('you can see me after 2 seconds')\r\n        // if (chartContainer && chartContainer.current) {\r\n        //     const newChartInstance = new Chartjs(chartContainer.current, chartConfig);\r\n        //     setChartInstance(newChartInstance);\r\n        // }\r\n        // console.log(weather)\r\n        const newChartInstance = new Chartjs(chartContainer.current, chartConfig);\r\n        setChartInstance(newChartInstance);\r\n    }, 2000);\r\n\r\n  }, []);\r\n\r\n\r\n  if (weather === 1){\r\n      console.log('yes')\r\n  } else {\r\n      console.log('no')\r\n  }\r\n\r\n\r\n\r\n  const chartConfig = {\r\n    type: 'line',\r\n        data: {\r\n        datasets: [{\r\n            data: [],\r\n            label: 'Temperture Forcast (C)',\r\n            backgroundColor: '#fde17e',\r\n    \r\n            // This binds the dataset to the left y axis\r\n            yAxisID: 'left-y-axis'\r\n        }, {\r\n            data: [0.10, 0.20, 0.30, 0.30, 0.30, 0, 0.20],\r\n            label: 'Chance of Rain (%)',\r\n            backgroundColor: '#4DC3FF',\r\n    \r\n            // This binds the dataset to the right y axis\r\n            yAxisID: 'right-y-axis'\r\n        }],\r\n        labels: [today[0], tomorrow[0], twoDaysAway[0], threeDaysAway[0], fourDaysAway[0],fiveDaysAway[0],sixDaysAway[0],]\r\n    },\r\n        options: {\r\n            scales: {\r\n                yAxes: [{\r\n                    id: 'left-y-axis',\r\n                    type: 'linear',\r\n                    position: 'left'\r\n                }, {\r\n                    id: 'right-y-axis',\r\n                    type: 'linear',\r\n                    position: 'right'\r\n                }]\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n  let renderChart = null\r\n  if (true) {\r\n      renderChart = (\r\n        <Row>\r\n            <Col>\r\n                <canvas ref={chartContainer} />\r\n            </Col>\r\n        </Row>\r\n      )\r\n    } \r\n\r\n\r\n  return (\r\n    <Container>\r\n        <Row>\r\n            <Col sm={4} ></Col>\r\n            <Col>\r\n                <h4>Weather App</h4>\r\n            </Col>\r\n        </Row>\r\n        {renderChart}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Chart;"]},"metadata":{},"sourceType":"module"}