{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jdk17\\\\Desktop\\\\KingFisher\\\\kingfisher-kayaking\\\\src\\\\Componets\\\\routes\\\\routes.js\";\nimport React, { useState } from 'react';\nimport { Card, Container, Button, Row, Col } from 'react-bootstrap';\nimport Bird from './pic-1.jpg';\nimport Bir from './pic-2.jpg';\nimport Bi from './pic-3.jpg';\n\nfunction Routes({\n  showRoutes,\n  salt,\n  sangamon,\n  saline\n}) {\n  const salineLevel = useState({\n    level: 'loading...'\n  });\n  const saltForkLevel = useState({\n    level: 'loading...'\n  });\n  const sangamonLevel = useState({\n    level: 'loading...'\n  });\n  const routeData = useState({\n    routeCards: [{\n      title: 'Salt Fork',\n      body: 'It is a wide river',\n      img: Bird,\n      button: salt,\n      waterLevel: saltForkLevel[0].level\n    }, {\n      title: 'Sangamon',\n      body: 'This river is Lincolns river',\n      img: Bir,\n      button: sangamon,\n      waterLevel: sangamonLevel[0].level\n    }, {\n      title: 'Saline',\n      body: 'This is the narrowest and most likly to see some cool animals',\n      img: Bi,\n      button: saline,\n      waterLevel: salineLevel[0].level\n    }]\n  });\n  let card = null;\n  const salineURL = 'https://waterservices.usgs.gov/nwis/iv/?format=json&sites=03337570&parameterCd=00065&siteStatus=all';\n  const saltForkURL = 'https://waterservices.usgs.gov/nwis/iv/?format=json&sites=03336900&parameterCd=00065&siteStatus=all';\n  const sangamonURL = 'https://waterservices.usgs.gov/nwis/iv/?format=json&sites=05572000&parameterCd=00065&siteStatus=all'; // const testHandler = () => {\n  //     console.log('cards')\n  //     card = (\n  //         <Row>\n  //             {routeData[0].routeCards.map(card => {\n  //                 return (\n  //                     <Col sm={4}>\n  //                         <Card.Img variant=\"top\" src={card.img} />\n  //                         <Card.Body className='kayaks-8'>\n  //                             <Card.Title>{card.title}</Card.Title>\n  //                             <Card.Text>\n  //                                 <p>{card.body}</p>\n  //                                 <h6>Water Level: {} ft</h6>\n  //                             </Card.Text>\n  //                             <Button onClick={() => {setTimeout(testHandler, 2000)}} variant=\"primary\">Book Trip</Button>\n  //                         </Card.Body>\n  //                     </Col>\n  //             )})}\n  //         </Row>\n  //     )\n  // }\n\n  const getDataHandler = () => {\n    async function getData() {\n      const response = await fetch(salineURL);\n      const responseSalt = await fetch(saltForkURL);\n      const responseSangamon = await fetch(sangamonURL);\n      const data = await response.json();\n      const dataSalt = await responseSalt.json();\n      const dataSangamon = await responseSangamon.json();\n      const salineWaterLevel = data.value.timeSeries[0].values[0].value[0].value;\n      const saltForkWaterLevel = dataSalt.value.timeSeries[0].values[0].value[0].value;\n      const sangamonWaterLevel = dataSangamon.value.timeSeries[0].values[0].value[0].value;\n      salineLevel[1]({\n        level: salineWaterLevel\n      });\n      saltForkLevel[1]({\n        level: saltForkWaterLevel\n      });\n      sangamonLevel[1]({\n        level: sangamonWaterLevel\n      });\n    }\n\n    getData();\n  };\n\n  let WaterLevel = null;\n\n  const setClassNameHandler = () => {\n    WaterLevel = 'kayaks-0';\n  };\n\n  if (true) {// testHandler();\n    // setTimeout(\n    //     () => testHandler(), \n    //     2000\n    // );\n  }\n\n  if (true) {\n    card = /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }, routeData[0].routeCards.map(card => {\n      return /*#__PURE__*/React.createElement(Col, {\n        sm: 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Card.Img, {\n        variant: \"top\",\n        src: card.img,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Card.Body, {\n        className: \"kayaks-8\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Card.Title, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 33\n        }\n      }, card.title), /*#__PURE__*/React.createElement(Card.Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 37\n        }\n      }, card.body), /*#__PURE__*/React.createElement(\"h6\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 37\n        }\n      }, \"Water Level: \", \" ft\")), /*#__PURE__*/React.createElement(Button, {\n        onClick: () => {\n          setTimeout(testHandler, 2000);\n        },\n        variant: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 33\n        }\n      }, \"Book Trip\")));\n    }));\n  }\n\n  let routes = null;\n\n  if (showRoutes) {\n    if (saltForkLevel[0].level === 'loading...') {\n      getDataHandler();\n    }\n\n    if (1 > salineLevel[0].level) {\n      setClassNameHandler();\n    }\n\n    routes = /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      sm: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card.Img, {\n      variant: \"top\",\n      src: Bird,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"kayaks-8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 29\n      }\n    }, routeData[0].routeCards[0].title), /*#__PURE__*/React.createElement(Card.Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 33\n      }\n    }, routeData[0].routeCards[0].body), /*#__PURE__*/React.createElement(\"h6\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 33\n      }\n    }, \"Water Level: \", saltForkLevel[0].level, \" ft\")), /*#__PURE__*/React.createElement(Button, {\n      onClick: salt,\n      variant: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 29\n      }\n    }, \"Book Trip\")))));\n  } else {\n    routes = null;\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, routes);\n}\n\nexport default Routes;","map":{"version":3,"sources":["C:/Users/jdk17/Desktop/KingFisher/kingfisher-kayaking/src/Componets/routes/routes.js"],"names":["React","useState","Card","Container","Button","Row","Col","Bird","Bir","Bi","Routes","showRoutes","salt","sangamon","saline","salineLevel","level","saltForkLevel","sangamonLevel","routeData","routeCards","title","body","img","button","waterLevel","card","salineURL","saltForkURL","sangamonURL","getDataHandler","getData","response","fetch","responseSalt","responseSangamon","data","json","dataSalt","dataSangamon","salineWaterLevel","value","timeSeries","values","saltForkWaterLevel","sangamonWaterLevel","WaterLevel","setClassNameHandler","map","setTimeout","testHandler","routes"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\r\nimport { Card, Container, Button, Row, Col } from 'react-bootstrap';\r\nimport Bird from './pic-1.jpg';\r\nimport Bir from './pic-2.jpg';\r\nimport Bi from './pic-3.jpg';\r\n\r\nfunction Routes({showRoutes, salt, sangamon, saline}) {\r\n    \r\n    const salineLevel = useState({level: 'loading...'})\r\n    const saltForkLevel = useState({level: 'loading...'})\r\n    const sangamonLevel = useState({level: 'loading...'})\r\n\r\n\r\n    const routeData = useState({routeCards: [\r\n        {title: 'Salt Fork', body: 'It is a wide river', img: Bird, button: salt, waterLevel:  saltForkLevel[0].level},\r\n        {title: 'Sangamon', body: 'This river is Lincolns river', img: Bir, button: sangamon, waterLevel:  sangamonLevel[0].level},\r\n        {title: 'Saline', body: 'This is the narrowest and most likly to see some cool animals', img: Bi, button: saline, waterLevel:  salineLevel[0].level},\r\n    ]})\r\n\r\n    let card = null\r\n\r\n    const salineURL = 'https://waterservices.usgs.gov/nwis/iv/?format=json&sites=03337570&parameterCd=00065&siteStatus=all'\r\n    const saltForkURL = 'https://waterservices.usgs.gov/nwis/iv/?format=json&sites=03336900&parameterCd=00065&siteStatus=all'\r\n    const sangamonURL = 'https://waterservices.usgs.gov/nwis/iv/?format=json&sites=05572000&parameterCd=00065&siteStatus=all'\r\n\r\n    // const testHandler = () => {\r\n    //     console.log('cards')\r\n    //     card = (\r\n    //         <Row>\r\n    //             {routeData[0].routeCards.map(card => {\r\n    //                 return (\r\n    //                     <Col sm={4}>\r\n    //                         <Card.Img variant=\"top\" src={card.img} />\r\n    //                         <Card.Body className='kayaks-8'>\r\n    //                             <Card.Title>{card.title}</Card.Title>\r\n    //                             <Card.Text>\r\n    //                                 <p>{card.body}</p>\r\n    //                                 <h6>Water Level: {} ft</h6>\r\n    //                             </Card.Text>\r\n    //                             <Button onClick={() => {setTimeout(testHandler, 2000)}} variant=\"primary\">Book Trip</Button>\r\n    //                         </Card.Body>\r\n    //                     </Col>\r\n    //             )})}\r\n    //         </Row>\r\n    //     )\r\n    // }\r\n\r\n\r\n    const getDataHandler = () => {\r\n        async function getData() {\r\n            const response = await fetch(salineURL);\r\n            const responseSalt = await fetch(saltForkURL);\r\n            const responseSangamon = await fetch(sangamonURL);\r\n            const data = await response.json();\r\n            const dataSalt = await responseSalt.json();\r\n            const dataSangamon = await responseSangamon.json();\r\n            const salineWaterLevel = data.value.timeSeries[0].values[0].value[0].value\r\n            const saltForkWaterLevel = dataSalt.value.timeSeries[0].values[0].value[0].value\r\n            const sangamonWaterLevel = dataSangamon.value.timeSeries[0].values[0].value[0].value\r\n            salineLevel[1]({level: salineWaterLevel})\r\n            saltForkLevel[1]({level: saltForkWaterLevel})\r\n            sangamonLevel[1]({level: sangamonWaterLevel})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n    \r\n        getData();\r\n\r\n    };\r\n\r\n    let WaterLevel = null\r\n    const setClassNameHandler = () => {\r\n        WaterLevel = 'kayaks-0'\r\n    };\r\n\r\n\r\n\r\n\r\n    if (true) {\r\n        // testHandler();\r\n        \r\n        // setTimeout(\r\n        //     () => testHandler(), \r\n        //     2000\r\n        // );\r\n\r\n    }\r\n\r\n    if (true) {\r\n        card = (\r\n            <Row>\r\n                {routeData[0].routeCards.map(card => {\r\n                    return (\r\n                        <Col sm={4}>\r\n                            <Card.Img variant=\"top\" src={card.img} />\r\n                            <Card.Body className='kayaks-8'>\r\n                                <Card.Title>{card.title}</Card.Title>\r\n                                <Card.Text>\r\n                                    <p>{card.body}</p>\r\n                                    <h6>Water Level: {} ft</h6>\r\n                                </Card.Text>\r\n                                <Button onClick={() => {setTimeout(testHandler, 2000)}} variant=\"primary\">Book Trip</Button>\r\n                            </Card.Body>\r\n                        </Col>\r\n                )})}\r\n            </Row>\r\n        )\r\n    }\r\n\r\n\r\n\r\n    let routes = null\r\n    if (showRoutes){\r\n\r\n        if (saltForkLevel[0].level === 'loading...'){\r\n            getDataHandler()\r\n        }\r\n\r\n        if (1 > salineLevel[0].level){\r\n            setClassNameHandler()\r\n        }\r\n\r\n        \r\n        routes = (\r\n        <Container>\r\n                <Row>\r\n                    <Col sm={4}>\r\n                        <Card.Img variant=\"top\" src={Bird} />\r\n                        <Card.Body className='kayaks-8'>\r\n                            <Card.Title>{routeData[0].routeCards[0].title}</Card.Title>\r\n                            <Card.Text>\r\n                                <p>{routeData[0].routeCards[0].body}</p>\r\n                                <h6>Water Level: {saltForkLevel[0].level} ft</h6>\r\n                            </Card.Text>\r\n                            <Button onClick={salt} variant=\"primary\">Book Trip</Button>\r\n                        </Card.Body>\r\n                    </Col>\r\n                </Row>\r\n        </Container>)\r\n    } else { routes = null };\r\n    \r\n    \r\n    \r\n    \r\n    return (\r\n        <div>\r\n            {routes}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Routes;"]},"metadata":{},"sourceType":"module"}